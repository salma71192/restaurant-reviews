class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL,{method:"GET"}).then(t=>{if(t.ok)return t.json();{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}},e=>console.log(e.message)).then(function(t){console.log(t),e(null,t)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,s)=>{if(n)t(n,null);else{const n=s.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((s,a)=>{if(s)n(s,null);else{let s=a;"all"!=e&&(s=s.filter(t=>t.cuisine_type==e)),"all"!=t&&(s=s.filter(e=>e.neighborhood==t)),n(null,s)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),s=t.filter((e,n)=>t.indexOf(e)==n);e(null,s)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/build/img/${e.photograph}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}function createDB(){"use strict";"indexedDB"in window?idb.open("couches-n-restaurants",3,function(e){switch(e.oldVersion){case 0:case 1:console.log("Creating the restaurants object store"),e.createObjectStore("restaurants",{keyPath:"id"});case 2:console.log("Creating a name index"),e.transaction.objectStore("restaurants").createIndex("name","name",{unique:!0})}}).then(function(e){DBHelper.fetchRestaurants((t,n)=>{console.log(n);var s=e.transaction("restaurants","readwrite").objectStore("restaurants");return Promise.all(n.map(function(e){return s.add(e)})).then(()=>console.log("All restaurants have been added."))})}):console.log("This browser doesn't support IndexedDB")}createDB();