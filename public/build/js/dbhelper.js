class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(t){fetch(DBHelper.DATABASE_URL,{method:"GET"}).then(e=>{if(e.ok)return e.json();{const l=`Request failed. Returned status of ${e.status}`;t(l,null)}},t=>console.log(t.message)).then(function(e){console.log(e),t(null,e)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((l,s)=>{if(l)e(l,null);else{const l=s.find(e=>e.id==t);l?e(null,l):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((l,s)=>{if(l)e(l,null);else{const l=s.filter(e=>e.cuisine_type==t);e(null,l)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((l,s)=>{if(l)e(l,null);else{const l=s.filter(e=>e.neighborhood==t);e(null,l)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,l){DBHelper.fetchRestaurants((s,n)=>{if(s)l(s,null);else{let s=n;"all"!=t&&(s=s.filter(e=>e.cuisine_type==t)),"all"!=e&&(s=s.filter(t=>t.neighborhood==e)),l(null,s)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,l)=>{if(e)t(e,null);else{const e=l.map((t,e)=>l[e].neighborhood),s=e.filter((t,l)=>e.indexOf(t)==l);t(null,s)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,l)=>{if(e)t(e,null);else{const e=l.map((t,e)=>l[e].cuisine_type),s=e.filter((t,l)=>e.indexOf(t)==l);t(null,s)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/build/img/${t.photograph}.webp`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}